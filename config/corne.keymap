/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

&mt {
    hold-trigger-key-positions = <36 37 38 39 40 41>;
    hold-trigger-on-release;
    flavor = "tap-preferred";
    tapping-term-ms = <250>;
};

&lt { tapping-term-ms = <250>; };

/ {
    behaviors {
        tp: tap_preferred {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_PREFERRED";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        renter {
            bindings = <&kp ENTER>;
            key-positions = <40 41>;
        };

        lesc {
            bindings = <&kp ESCAPE>;
            key-positions = <1 2 3>;
        };

        r_esc {
            bindings = <&kp ESCAPE>;
            key-positions = <9 10 8>;
        };

        lenter {
            bindings = <&kp ENTER>;
            key-positions = <36 37>;
        };
    };

    macros {
        sv_cheats: sv_cheats {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp S &kp V &kp UNDER &kp C &kp H &kp E &kp A &kp T &kp S &kp SPACE &kp N1>;
            label = "SV_CHEATS";
        };

        kill: kill {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K &kp I &kp L &kp L>;
            label = "KILL";
        };

        sv_autobunnyhopping_1: sv_autobunnyhopping_1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp S &kp V &kp UNDER &kp A &kp U &kp T &kp O &kp B &kp U &kp N &kp N &kp Y &kp H &kp O &kp P &kp P &kp I &kp N &kp G &kp SPACE &kp N1>;
            label = "SV_AUTOBUNNYHOPPING_1";
        };

        sv_autobunnyhopping_0: sv_autobunnyhopping_0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp S &kp V &kp UNDER &kp A &kp U &kp T &kp O &kp B &kp U &kp N &kp N &kp Y &kp H &kp O &kp P &kp P &kp I &kp N &kp G &kp SPACE &kp NUMBER_0>;
            label = "SV_AUTOBUNNYHOPPING_0";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default {
            // -----------------------------------------------------------------------------------------
            // | TAB  |  Q  |  W  |  E  |  R  |    T    |   |  Y  |  U   |  I  |  O  |  P  | ESC |
            // | CTRL |  A  |  S  |  D  |  F  |    G    |   |  H  |  J   |  K  |  L  |  ;  |  LWR/'   |
            // | SHFT |  Z  |  X  |  C  |  V  |    B    |   |  N  |  M   |  ,  |  .  |  /  | SHFT |
            //                    | GUI | LWR | ALT/ENT |   | HYPER/SPC | BKSP  | RSE |

            bindings = <
&trans  &kp Q           &kp W           &mt SQT E           &kp R             &kp T          &trans  &kp U             &kp I               &mt LEFT_BRACKET O  &mt RIGHT_BRACKET P     &trans
&trans  &mt LEFT_WIN A  &mt LEFT_ALT S  &mt LEFT_CONTROL D  &mt LEFT_SHIFT F  &trans         &trans  &mt LEFT_SHIFT J  &mt LEFT_CONTROL K  &mt LEFT_ALT L      &mt LEFT_WIN SEMICOLON  &trans
&trans  &kp Z           &kp X           &kp C               &kp V             &trans         &trans  &kp M             &kp COMMA           &kp DOT             &kp SLASH               &trans
                                        &mt TAB B           &kp G             &lt 1 SPACE    &kp Y   &kp H             &kp N
            >;
        };

        second {
            bindings = <
&trans  &kp GRAVE     &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &trans    &trans  &kp F2          &kp F8     &trans        &kp BACKSPACE  &trans
&trans  &trans        &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &trans    &trans  &kp LEFT_ARROW  &kp DOWN   &kp UP_ARROW  &kp RIGHT      &trans
&trans  &kp NUMBER_0  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans    &trans  &kp MINUS       &kp EQUAL  &trans        &kp BACKSLASH  &trans
                                    &trans        &trans        &trans    &trans  &trans          &trans
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
