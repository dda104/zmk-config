/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        tp: tap_preferred {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_PREFERRED";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // | TAB  |  Q  |  W  |  E  |  R  |    T    |   |  Y  |  U   |  I  |  O  |  P  | ESC |
            // | CTRL |  A  |  S  |  D  |  F  |    G    |   |  H  |  J   |  K  |  L  |  ;  |  LWR/'   |
            // | SHFT |  Z  |  X  |  C  |  V  |    B    |   |  N  |  M   |  ,  |  .  |  /  | SHFT |
            //                    | GUI | LWR | ALT/ENT |   | HYPER/SPC | BKSP  | RSE |

            bindings = <
&kp ESCAPE  &kp Q           &kp W           &kp E               &kp R             &mt GRAVE T    &kp Y                           &kp U                &kp I               &mt LEFT_BRACKET O  &mt RIGHT_BRACKET P     &kp BACKSPACE
&kp TAB     &mt A LEFT_WIN  &mt LEFT_ALT S  &mt LEFT_CONTROL D  &mt LEFT_SHIFT F  &kp G          &kp H                           &mt LEFT_SHIFT J     &mt LEFT_CONTROL K  &mt L LEFT_ALT      &mt LEFT_WIN SEMICOLON  &kp SQT
&kp LSHFT   &kp Z           &kp X           &kp C               &kp V             &kp B          &kp N                           &mt RIGHT_BRACKET M  &kp COMMA           &kp DOT             &kp FSLH                &kp RSHFT
                                            &kp LGUI            &mo 1             &kp SPACE      &tp LC(LS(LA(LEFT_ALT))) ENTER  &mo 2                &kp LEFT_CONTROL
            >;
        };

        layer_1 {
            bindings = <
&kp F1         &kp F2         &kp F3        &kp F4        &kp F5          &kp F6            &kp F7        &kp F8        &kp F9        &kp F10       &kp F11    &kp F12
&kp NUMBER_1   &kp NUMBER_2   &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5    &kp NUMBER_6      &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0  &kp MINUS  &kp EQUAL
&kp LC(LS(C))  &kp LS(LC(V))  &kp LC(C)     &kp LC(V)     &kp LC(INSERT)  &kp LS(INSERT)    &trans        &trans        &trans        &trans        &trans     &kp INSERT
                                            &trans        &trans          &trans            &trans        &trans        &trans
            >;
        };

        layer_2 {
            bindings = <
&kp EXCLAMATION  &kp AT_SIGN  &kp HASH  &kp DOLLAR  &kp PERCENT  &kp CARET    &mt QUESTION AMPERSAND  &kp ASTERISK    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans  &kp DELETE
&trans           &trans       &trans    &trans      &trans       &trans       &kp LEFT                &kp DOWN_ARROW  &kp UP_ARROW          &kp RIGHT              &trans  &trans
&trans           &trans       &trans    &trans      &trans       &trans       &kp HOME                &kp PAGE_DOWN   &kp PAGE_UP           &kp END                &trans  &kp INSERT
                                        &trans      &trans       &trans       &trans                  &trans          &trans
            >;
        };

        layer_3 {
            bindings = <
&trans  &trans  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &trans          &trans        &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &trans        &kp LA(LC(DEL))
&trans  &trans  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &trans          &trans        &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &trans        &trans
&trans  &kp N0  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_0    &kp NUMBER_0  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_0  &trans
                              &trans        &trans        &trans          &trans        &trans        &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        nums {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
