/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

&mt {
    tapping-term-ms = <250>;
    quick-tap-ms = <175>;
    require-prior-idle-ms = <150>;
    hold-trigger-key-positions = <36 37 38 39 40 41>;
    hold-trigger-on-release;
    flavor = "tap-preferred";
};

&lt {
    tapping-term-ms = <250>;
    quick-tap-ms = <175>;
    require-prior-idle-ms = <150>;
};

/ {
    behaviors {
        tp: tap_preferred {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_PREFERRED";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        lenter {
            bindings = <&kp ENTER>;
            key-positions = <36 37>;
        };

        renter {
            bindings = <&kp ENTER>;
            key-positions = <40 41>;
        };

        to_default {
            bindings = <&to 0>;
            key-positions = <0 12 24>;
        };

        to_cs {
            bindings = <&to 4>;
            key-positions = <1 13 25>;
        };

        lesc {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1 2>;
        };

        f1 {
            bindings = <&kp F1>;
            key-positions = <0 12>;
        };

        f2 {
            bindings = <&kp F2>;
            key-positions = <1 13>;
        };

        f3 {
            bindings = <&kp F3>;
            key-positions = <2 14>;
        };

        f4 {
            bindings = <&kp F4>;
            key-positions = <15 3>;
        };

        f5 {
            bindings = <&kp F5>;
            key-positions = <4 16>;
        };

        f6 {
            bindings = <&kp F6>;
            key-positions = <5 17>;
        };

        f7 {
            bindings = <&kp F7>;
            key-positions = <12 24>;
        };

        f8 {
            bindings = <&kp F8>;
            key-positions = <13 25>;
        };

        f9 {
            bindings = <&kp F9>;
            key-positions = <14 26>;
        };

        f10 {
            bindings = <&kp F10>;
            key-positions = <15 27>;
        };

        f11 {
            bindings = <&kp F11>;
            key-positions = <16 28>;
        };

        f12 {
            bindings = <&kp F12>;
            key-positions = <17 29>;
        };

        r_esc {
            bindings = <&kp ESCAPE>;
            key-positions = <9 10 11>;
        };
    };

    macros {
        sv_cheats: sv_cheats {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp S &kp V &kp UNDER &kp C &kp H &kp E &kp A &kp T &kp S &kp SPACE &kp N1>;
            label = "SV_CHEATS";
        };

        kill: kill {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K &kp I &kp L &kp L>;
            label = "KILL";
        };

        sv_autobunnyhopping_1: sv_autobunnyhopping_1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp S &kp V &kp UNDER &kp A &kp U &kp T &kp O &kp B &kp U &kp N &kp N &kp Y &kp H &kp O &kp P &kp P &kp I &kp N &kp G &kp SPACE &kp N1>;
            label = "SV_AUTOBUNNYHOPPING_1";
        };

        sv_autobunnyhopping_0: sv_autobunnyhopping_0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp S &kp V &kp UNDER &kp A &kp U &kp T &kp O &kp B &kp U &kp N &kp N &kp Y &kp H &kp O &kp P &kp P &kp I &kp N &kp G &kp SPACE &kp NUMBER_0>;
            label = "SV_AUTOBUNNYHOPPING_0";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default {
            // -----------------------------------------------------------------------------------------
            // | TAB  |  Q  |  W  |  E  |  R  |    T    |   |  Y  |  U   |  I  |  O  |  P  | ESC |
            // | CTRL |  A  |  S  |  D  |  F  |    G    |   |  H  |  J   |  K  |  L  |  ;  |  LWR/'   |
            // | SHFT |  Z  |  X  |  C  |  V  |    B    |   |  N  |  M   |  ,  |  .  |  /  | SHFT |
            //                    | GUI | LWR | ALT/ENT |   | HYPER/SPC | BKSP  | RSE |

            bindings = <
&kp GRAVE  &kp Q           &kp W           &kp E               &kp R             &kp T           &kp Y         &kp U             &kp I               &mt LEFT_BRACKET O  &mt RIGHT_BRACKET P     &kp BACKSPACE
&kp TAB    &mt LEFT_WIN A  &mt LEFT_ALT S  &mt LEFT_CONTROL D  &mt LEFT_SHIFT F  &mt INSERT G    &mt INSERT H  &mt LEFT_SHIFT J  &mt LEFT_CONTROL K  &mt LEFT_ALT L      &mt LEFT_WIN SEMICOLON  &kp SQT
&trans     &kp Z           &kp X           &kp C               &kp V             &kp B           &kp N         &kp M             &kp COMMA           &kp DOT             &kp SLASH               &mt LS(BACKSLASH) BACKSLASH
                                           &mo 3               &mo 2             &lt 1 SPACE     &lt 1 SPACE   &mo 2             &mo 3
            >;
        };

        second {
            bindings = <
&trans  &trans                     &trans                     &trans                     &mt LS(MINUS) MINUS        &mt LS(EQUAL) EQUAL          &trans          &trans          &trans        &trans     &trans  &kp DELETE
&trans  &mt LS(NUMBER_1) NUMBER_1  &mt LS(NUMBER_2) NUMBER_2  &mt LS(NUMBER_3) NUMBER_3  &mt LS(NUMBER_4) NUMBER_4  &mt LS(N5) NUMBER_5          &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT  &trans  &trans
&trans  &mt LS(NUMBER_6) NUMBER_6  &mt LS(NUMBER_7) NUMBER_7  &mt LS(NUMBER_8) NUMBER_8  &mt LS(NUMBER_9) NUMBER_9  &mt LS(NUMBER_0) NUMBER_0    &trans          &trans          &trans        &trans     &trans  &trans
                                                              &trans                     &trans                     &trans                       &trans          &trans          &trans
            >;
        };

        default_mirror {
            bindings = <
&kp BACKSPACE                &mt RIGHT_BRACKET P  &mt LEFT_BRACKET O  &kp I      &kp U   &kp Y     &kp T   &kp R   &kp E   &kp W  &kp Q  &kp GRAVE
&kp SQT                      &kp SEMICOLON        &kp L               &kp K      &kp J   &kp H     &kp G   &kp F   &kp D   &kp S  &kp A  &kp TAB
&mt LS(BACKSLASH) BACKSLASH  &kp SLASH            &kp PERIOD          &kp COMMA  &kp M   &kp N     &kp B   &kp V   &kp C   &kp X  &kp Z  &trans
                                                                      &trans     &trans  &trans    &trans  &trans  &trans
            >;
        };

        second_mirror {
            bindings = <
&kp DELETE  &trans  &trans          &trans        &trans          &trans       &mt LS(MINUS) MINUS        &mt LS(EQUAL) EQUAL  &trans               &trans               &trans               &trans
&trans      &trans  &kp LEFT_ARROW  &kp UP_ARROW  &kp DOWN_ARROW  &kp RIGHT    &mt LS(N1) NUMBER_1        &mt LS(N2) NUMBER_2  &mt LS(N3) NUMBER_3  &mt LS(N4) NUMBER_4  &mt LS(N5) NUMBER_5  &trans
&trans      &trans  &trans          &trans        &trans          &trans       &mt LS(NUMBER_6) NUMBER_6  &mt LS(N7) NUMBER_7  &mt LS(N8) NUMBER_8  &mt LS(N9) NUMBER_9  &mt LS(N0) NUMBER_0  &trans
                                    &trans        &trans          &trans       &trans                     &trans               &trans
            >;
        };

        cs {
            bindings = <
&kp NUMBER_3    &kp NUMBER_2  &kp NUMBER_1  &kp W  &kp E  &kp R        &none  &none  &none  &none  &none  &none
&kp LEFT_SHIFT  &none         &kp A         &kp S  &kp D  &kp F        &none  &none  &none  &none  &none  &none
&kp LCTRL       &none         &none         &none  &none  &kp B        &none  &none  &none  &none  &none  &none
                                            &mo 6  &mo 5  &kp SPACE    &none  &none  &none
            >;
        };

        cs2 {
            bindings = <
&kp GRAVE  &trans  &trans  &trans  &trans  &kp T     &trans  &trans  &trans  &trans  &trans  &trans
&kp TAB    &trans  &trans  &trans  &trans  &kp G     &trans  &trans  &trans  &trans  &trans  &trans
&trans     &trans  &trans  &trans  &kp F1  &kp F2    &trans  &trans  &trans  &trans  &trans  &trans
                           &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        cs3 {
            bindings = <
&sv_cheats  &kill   &sv_autobunnyhopping_1  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans      &trans  &sv_autobunnyhopping_0  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans      &trans  &trans                  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                                            &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
