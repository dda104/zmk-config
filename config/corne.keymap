/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        tp: tap_preferred {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_PREFERRED";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        lenter {
            bindings = <&kp ENTER>;
            key-positions = <36 37>;
        };

        renter {
            bindings = <&kp ENTER>;
            key-positions = <40 41>;
        };

        todefault {
            bindings = <&to 0>;
            key-positions = <0 12 24>;
        };

        tocs {
            bindings = <&to 6>;
            key-positions = <1 13 25>;
        };

        lesc {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1 2>;
        };

        ll2 {
            bindings = <&mo 4>;
            key-positions = <36 12>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // | TAB  |  Q  |  W  |  E  |  R  |    T    |   |  Y  |  U   |  I  |  O  |  P  | ESC |
            // | CTRL |  A  |  S  |  D  |  F  |    G    |   |  H  |  J   |  K  |  L  |  ;  |  LWR/'   |
            // | SHFT |  Z  |  X  |  C  |  V  |    B    |   |  N  |  M   |  ,  |  .  |  /  | SHFT |
            //                    | GUI | LWR | ALT/ENT |   | HYPER/SPC | BKSP  | RSE |

            bindings = <
&kp LEFT_ALT      &kp Q  &kp W  &kp E  &kp R  &kp T          &kp Y      &kp U  &kp I      &kp O    &kp P          &kp BACKSPACE
&kp LEFT_CONTROL  &kp A  &kp S  &kp D  &kp F  &kp G          &kp H      &kp J  &kp K      &kp L    &kp SEMICOLON  &kp SQT
&kp LEFT_SHIFT    &kp Z  &kp X  &kp C  &kp V  &kp B          &kp N      &kp M  &kp COMMA  &kp DOT  &kp SLASH      &kp LEFT_SHIFT
                                &mo 2  &mo 1  &lt 3 SPACE    &kp SPACE  &mo 5  &trans
            >;
        };

        llm1 {
            bindings = <
&kp BACKSPACE  &kp P          &kp O       &kp I      &kp U   &kp Y     &trans  &trans  &trans  &trans  &trans  &trans
&kp SQT        &kp SEMICOLON  &kp L       &kp K      &kp J   &kp H     &trans  &trans  &trans  &trans  &trans  &trans
&trans         &kp SLASH      &kp PERIOD  &kp COMMA  &kp M   &kp N     &trans  &trans  &trans  &trans  &trans  &trans
                                          &trans     &trans  &trans    &trans  &trans  &trans
            >;
        };

        llm2 {
            bindings = <
&kp DELETE  &kp RIGHT_BRACKET  &kp LEFT_BRACKET  &kp EQUAL     &kp MINUS      &kp PRINTSCREEN    &trans  &trans  &trans  &trans  &trans  &trans
&trans      &trans             &kp LEFT          &kp UP_ARROW  &kp DOWN       &kp RIGHT          &trans  &trans  &trans  &trans  &trans  &trans
&trans      &kp BACKSLASH      &kp HOME          &kp PG_UP     &kp PAGE_DOWN  &kp END            &trans  &trans  &trans  &trans  &trans  &trans
                                                 &trans        &trans         &trans             &trans  &trans  &trans
            >;
        };

        ll1 {
            bindings = <
&kp GRAVE  &kp F2        &kp F3        &kp F4        &kp F5        &kp LG(LS(S))    &trans  &trans  &trans  &trans  &trans  &trans
&kp TAB    &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5           &trans  &trans  &trans  &trans  &trans  &trans
&trans     &kp NUMBER_6  &kp N7        &kp N8        &kp N9        &kp N0           &trans  &trans  &trans  &trans  &trans  &trans
                                       &trans        &trans        &trans           &trans  &trans  &trans
            >;
        };

        ll2 {
            bindings = <
&trans  &trans            &trans            &trans            &trans            &trans              &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LG(NUMBER_1)  &kp LG(NUMBER_2)  &kp LG(NUMBER_3)  &kp LG(NUMBER_4)  &kp LG(NUMBER_5)    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans            &trans            &kp LC(INSERT)    &kp LS(INSERT)    &trans              &trans  &trans  &trans  &trans  &trans  &trans
                                            &trans            &trans            &trans              &trans  &trans  &trans
            >;
        };

        rl1 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &kp PRINTSCREEN  &kp MINUS       &kp EQUAL     &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp DELETE
&trans  &trans  &trans  &trans  &trans  &trans    &kp LEFT         &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT         &trans             &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp HOME         &kp PAGE_DOWN   &kp PG_UP     &kp END           &kp BACKSLASH      &trans
                        &trans  &trans  &trans    &trans           &trans          &trans
            >;
        };

        cs {
            bindings = <
&kp NUMBER_3    &kp NUMBER_2  &kp NUMBER_1  &kp W  &kt E  &kp R        &trans  &trans  &trans  &trans  &trans  &trans
&kp LEFT_SHIFT  &none         &kp A         &kp S  &kp D  &kp F        &trans  &trans  &trans  &trans  &trans  &trans
&kp LCTRL       &none         &none         &none  &none  &kp B        &trans  &trans  &trans  &trans  &trans  &trans
                                            &none  &mo 7  &kp SPACE    &trans  &trans  &trans
            >;
        };

        cs2 {
            bindings = <
&kp NUMBER_6  &kp NUMBER_5  &kp NUMBER_4  &trans  &trans  &kp T     &trans  &trans  &trans  &trans  &trans  &trans
&kp TAB       &trans        &trans        &trans  &trans  &kp G     &trans  &trans  &trans  &trans  &trans  &trans
&trans        &trans        &trans        &trans  &kp F1  &kp F2    &trans  &trans  &trans  &trans  &trans  &trans
                                          &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
